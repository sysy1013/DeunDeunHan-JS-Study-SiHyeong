function findAddSaveUser(Users){
    Users.findOne({})
    .then((user)=>{
        user.name = 'zero';
        return user.save();
    })
    .then((user)=>{
        return Users.findOne({gender:'m'});
    })
    .then((user)=>{
        //생략
    })
    .catch(err=>{
        console.err(err);
    })
}

const Promise1 = Promise.resolve('성공');
const Promise2 = Promise.resolve('성공2');
Promise.all([Promise1,Promise2]);
.then((result)=>{
    console.log(result);
})
.catch((error)=>{
    console.error(error);
});


위의 프로미스를 async/await 문법으로 바꾼거.

async function findAddSaveUser(Users){
    let user = await Users.findOne({});
    user.name = 'zero';
    user = user.save();
    user = await Users.findOne({gender:'m'});
}

async function findAddSaveUser(Users){
    try{
        let user = await Users.findOne({});
        user.name = 'zero';
        user = user.save();
        user = await Users.findOne({gender:'m'});
    }catch(error){
        console.error(error);
    }
}

위에 async 예외 처리에 화살표 함수까지 더하기

const findAddSaveUser = async (Users)=>{
    try{
        let user = await Users.findOne({});
        user.name = 'zero';
        user = await user.save();
        user = await user.findOne({gender:'m'});
    }catch{
        console.error(error);
    }
}

const promise1 = Promise.resolve('성공1');
const promise2 = Promise.resolve('성공2');

(async()=>{
    for await (promise of [Promise1,Promise2]){
        console.log(promise);
    }
})();